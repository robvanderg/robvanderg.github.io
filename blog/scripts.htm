
<!DOCTYPE html>
<html lang="en">
    <head>
         <meta charset="UTF-8">
         <title>Rob van der Goot</title>
         <link rel="stylesheet" media="screen and (min-width: 1000px)" href="../css/big.css" />
         <link rel="stylesheet" media="screen and (max-width: 1000px)" href="../css/small.css"/>
        <link rel="icon" href="../favicon.ico" type="image/x-icon" />
     </head>
     <body>
         <div id="wrapper">
             <div id="menu">
                <div id="menuText">
                Menu
                </div>
                 <div id="buttonWrapper">
                     <a class="button" href="../">Home</a>
                     <a class="button" href="../papers/">Papers</a>
                     <a class="button" href="../cv/">CV</a>
                     <a class="button" href="../datasets/">Datasets</a>
                     <a class="button" href="../demos/">Demos</a>
                     <a class="button" href="../blog/">Blog</a>
                     <a class="button" href="../thesisProjects/">Thesis Projects</a>
                 </div>
             </div>
             <div id="content">


<div class="code">
class ScriptFinder():
    def __init__(self):
        ranges = []
        if not os.path.isfile('scripts/Scripts.txt'):
            os.system('mkdir -p scripts')
            os.system('wget https://www.unicode.org/Public/15.0.0/ucd/Scripts.txt --no-check-certificate -O scripts/Scripts.txt')
        for line in open('scripts/Scripts.txt'):
            tok = line.split(';')
            if line[0]!='#' and len(tok) == 2:
                char_range_hex = tok[0].strip().split('..')
                char_range_int = [int(x, 16) for x in char_range_hex]
                if len(char_range_int) == 1:
                    char_range_int.append(char_range_int[0])
                # Note that we include the first and the last character of the range 
                # in the indices, so the first range for Latin is 65-90 for example, 
                # character 65 (A) and 90 (Z) are both included in the Latin
                # set.  This means that for single character scripts (caught in
                # the "if" above) the same number is repeated twice
                ranges.append(char_range_int + [tok[1].strip().split()[0]])

        self.ranges = sorted(ranges)

    def find_char(self, char):
        if len(char) > 1:
            char = char[0]
        char_idx = ord(char)
        for rangeIdx, char_range in enumerate(self.ranges):
            if char_idx >= char_range[0]:
                if char_idx <= char_range[1]:
                    return char_range[2]
            if char_range[1] > char_idx: # we can give up, because the list is sorted
                break
        return None

    def guess_script(self, text):
        classes = {}
        for char in text:
            cat = self.find_char(char)
            if cat == None or cat == 'Common':
                continue
            if cat not in classes:
                classes[cat] = 0
            classes[cat] += 1
        if len(classes) == 0:
            return None
        main_class = sorted(classes.items(), key=lambda x: x[1], reverse=True)[0][0]
        return main_class
</div>
            </div>
        </div>
    </body>
</html>

